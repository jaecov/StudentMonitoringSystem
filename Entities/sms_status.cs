//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace StudentMonitoringSystem.Entities
{
    [Serializable]
    public partial class sms_status: BaseObject
    {
        #region Primitive Properties
    
        public virtual int id
        {
            get;
            set;
        }
    
        public virtual string name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<sms_inbox> sms_inbox
        {
            get
            {
                if (_sms_inbox == null)
                {
                    var newCollection = new FixupCollection<sms_inbox>();
                    newCollection.CollectionChanged += Fixupsms_inbox;
                    _sms_inbox = newCollection;
                }
                return _sms_inbox;
            }
            set
            {
                if (!ReferenceEquals(_sms_inbox, value))
                {
                    var previousValue = _sms_inbox as FixupCollection<sms_inbox>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsms_inbox;
                    }
                    _sms_inbox = value;
                    var newValue = value as FixupCollection<sms_inbox>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsms_inbox;
                    }
                }
            }
        }
        private ICollection<sms_inbox> _sms_inbox;
    
        public virtual ICollection<sms_inbox_archive> sms_inbox_archive
        {
            get
            {
                if (_sms_inbox_archive == null)
                {
                    var newCollection = new FixupCollection<sms_inbox_archive>();
                    newCollection.CollectionChanged += Fixupsms_inbox_archive;
                    _sms_inbox_archive = newCollection;
                }
                return _sms_inbox_archive;
            }
            set
            {
                if (!ReferenceEquals(_sms_inbox_archive, value))
                {
                    var previousValue = _sms_inbox_archive as FixupCollection<sms_inbox_archive>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsms_inbox_archive;
                    }
                    _sms_inbox_archive = value;
                    var newValue = value as FixupCollection<sms_inbox_archive>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsms_inbox_archive;
                    }
                }
            }
        }
        private ICollection<sms_inbox_archive> _sms_inbox_archive;
    
        public virtual ICollection<sms_outbox> sms_outbox
        {
            get
            {
                if (_sms_outbox == null)
                {
                    var newCollection = new FixupCollection<sms_outbox>();
                    newCollection.CollectionChanged += Fixupsms_outbox;
                    _sms_outbox = newCollection;
                }
                return _sms_outbox;
            }
            set
            {
                if (!ReferenceEquals(_sms_outbox, value))
                {
                    var previousValue = _sms_outbox as FixupCollection<sms_outbox>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsms_outbox;
                    }
                    _sms_outbox = value;
                    var newValue = value as FixupCollection<sms_outbox>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsms_outbox;
                    }
                }
            }
        }
        private ICollection<sms_outbox> _sms_outbox;
    
        public virtual ICollection<sms_outbox_archive> sms_outbox_archive
        {
            get
            {
                if (_sms_outbox_archive == null)
                {
                    var newCollection = new FixupCollection<sms_outbox_archive>();
                    newCollection.CollectionChanged += Fixupsms_outbox_archive;
                    _sms_outbox_archive = newCollection;
                }
                return _sms_outbox_archive;
            }
            set
            {
                if (!ReferenceEquals(_sms_outbox_archive, value))
                {
                    var previousValue = _sms_outbox_archive as FixupCollection<sms_outbox_archive>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsms_outbox_archive;
                    }
                    _sms_outbox_archive = value;
                    var newValue = value as FixupCollection<sms_outbox_archive>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsms_outbox_archive;
                    }
                }
            }
        }
        private ICollection<sms_outbox_archive> _sms_outbox_archive;

        #endregion
        #region Association Fixup
    
        private void Fixupsms_inbox(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (sms_inbox item in e.NewItems)
                {
                    item.sms_status = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (sms_inbox item in e.OldItems)
                {
                    if (ReferenceEquals(item.sms_status, this))
                    {
                        item.sms_status = null;
                    }
                }
            }
        }
    
        private void Fixupsms_inbox_archive(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (sms_inbox_archive item in e.NewItems)
                {
                    item.sms_status = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (sms_inbox_archive item in e.OldItems)
                {
                    if (ReferenceEquals(item.sms_status, this))
                    {
                        item.sms_status = null;
                    }
                }
            }
        }
    
        private void Fixupsms_outbox(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (sms_outbox item in e.NewItems)
                {
                    item.sms_status = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (sms_outbox item in e.OldItems)
                {
                    if (ReferenceEquals(item.sms_status, this))
                    {
                        item.sms_status = null;
                    }
                }
            }
        }
    
        private void Fixupsms_outbox_archive(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (sms_outbox_archive item in e.NewItems)
                {
                    item.sms_status = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (sms_outbox_archive item in e.OldItems)
                {
                    if (ReferenceEquals(item.sms_status, this))
                    {
                        item.sms_status = null;
                    }
                }
            }
        }

        #endregion
    }
}
